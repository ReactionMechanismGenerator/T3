#!/usr/bin/env python3
# encoding: utf-8

"""
t3 tests test_cantera_IDT module
"""

import os
import shutil

from arc.common import almost_equal_lists

from t3.common import SIMULATE_DATA_BASE_PATH
from tests.common import almost_equal, run_minimal
from t3.simulate.cantera_IDT import CanteraIDT, get_t_and_p_lists, get_idt_per_phi_p_condition, plot_idt_vs_temperature
from t3.utils.fix_cantera import fix_cantera


TEST_DIR = os.path.join(SIMULATE_DATA_BASE_PATH, 'cantera_simulator_test')
TEST_DIR_IDT = os.path.join(SIMULATE_DATA_BASE_PATH, 'cantera_idt_test')


def test_determine_radical_label():
    """
    Test the `determine_radical_label()` method.
    """
    t3 = run_minimal(project_directory=TEST_DIR)
    t3.set_paths()
    ct_adapter = CanteraIDT(t3=t3.t3,
                            rmg=t3.rmg,
                            paths=t3.paths,
                            logger=t3.logger,
                            atol=t3.rmg['model']['atol'],
                            rtol=t3.rmg['model']['rtol'],
                            )
    label = ct_adapter.determine_radical_label()
    assert label == 'OH(4)'


def test_get_cantera_species_label():
    """
    Test the `get_cantera_species_label()` method.
    """
    t3 = run_minimal(project_directory=TEST_DIR_IDT)
    t3.iteration = 2  # CH4 model
    t3.set_paths()
    ct_adapter = CanteraIDT(t3=t3.t3,
                            rmg=t3.rmg,
                            paths=t3.paths,
                            logger=t3.logger,
                            atol=t3.rmg['model']['atol'],
                            rtol=t3.rmg['model']['rtol'],
                            )
    assert ct_adapter.get_cantera_species_label('methane') == 'methane(1)'
    assert ct_adapter.get_cantera_species_label('O2') == 'O2(2)'
    assert ct_adapter.get_cantera_species_label('OH') == 'OH(6)'
    assert ct_adapter.get_cantera_species_label('CH3CH2OO') == 'CH3CH2OO(40)'


def test_get_t_and_p_lists():
    """
    Test the `get_t_and_p_lists()` method.
    """
    t3 = run_minimal(project_directory=TEST_DIR)
    t3.set_paths()
    t3.rmg['reactors'] = [{'type': 'gas batch constant T P',
                           'T': 1000,
                           'P': 1e0,
                           'termination_conversion': {'ethane': 0.2},
                           'termination_time': [5, 's'],
                           'termination_rate_ratio': 0.01,
                           'conditions_per_iteration': 12},
                          {'type': 'gas batch constant T P',
                           'T': [800, 1750],
                           'P': [1, 100],
                           'termination_conversion': {'ethane': 0.2},
                           'termination_time': [5, 's'],
                           'termination_rate_ratio': 0.01,
                           'conditions_per_iteration': 12},
                          ]
    ct_adapter = CanteraIDT(t3=t3.t3,
                            rmg=t3.rmg,
                            paths=t3.paths,
                            logger=t3.logger,
                            atol=t3.rmg['model']['atol'],
                            rtol=t3.rmg['model']['rtol'],
                            )
    T_list, P_list = get_t_and_p_lists(ct_adapter.rmg['reactors'][0])
    assert T_list == [1000.0]
    assert P_list == [1.0]
    T_list, P_list = get_t_and_p_lists(ct_adapter.rmg['reactors'][1])
    assert almost_equal_lists(T_list, [800.0, 832.27, 867.26, 905.31, 946.86, 992.41, 1042.55, 1098.04, 1159.76,
                                       1228.84, 1306.67, 1395.02, 1496.18, 1613.17, 1750.00], rtol=0.001, atol=0.1)
    assert P_list == [1.0, 10.0, 100.0]


def test_simulate_seiser():
    """
    Test the ``simulate()`` method for computing IDT using the Seiser model.
    """
    t3 = run_minimal(project_directory=TEST_DIR_IDT)
    t3.iteration = 1  # Seiser model
    t3.set_paths()
    t3.rmg['reactors'] = [{'type': 'gas batch constant T P',
                           'T': 1000, 'P': 1,
                           'termination_rate_ratio': 0.01},
                          ]
    t3.rmg['species'] = [{'label': 'nc7h16', 'smiles': 'CCCCCCC', 'concentration': 0, 'role': 'fuel',
                          'equivalence_ratios': [1.0]},
                         {'label': 'o2', 'smiles': '[O][O]', 'concentration': 0, 'role': 'oxygen'},
                         {'label': 'n2', 'smiles': 'N#N', 'concentration': 0, 'role': 'nitrogen'}]
    ct_adapter = CanteraIDT(t3=t3.t3,
                            rmg=t3.rmg,
                            paths=t3.paths,
                            logger=t3.logger,
                            atol=t3.rmg['model']['atol'],
                            rtol=t3.rmg['model']['rtol'],
                            )
    assert ct_adapter.idt_dict == dict()
    ct_adapter.simulate()
    print(ct_adapter.idt_dict)
    assert almost_equal(ct_adapter.idt_dict[(1.0, 1, 1000)], 0.0328465)


def test_simulate_rmg_ammonia():
    """
    Test the ``simulate()`` method for computing IDT for NH3.
    """
    t3 = run_minimal(project_directory=TEST_DIR_IDT)
    t3.iteration = 0  # NH3 model
    t3.set_paths()
    t3.rmg['reactors'] = [{'type': 'gas batch constant T P',
                           'T': [1500, 1600], 'P': [1, 100],
                           'termination_rate_ratio': 0.01},
                          ]
    t3.rmg['species'] = [{'label': 'NH3', 'smiles': 'N', 'concentration': 0, 'role': 'fuel',
                          'equivalence_ratios': [0.5, 1.0]},
                         {'label': 'O2', 'smiles': '[O][O]', 'concentration': 0, 'role': 'oxygen'},
                         {'label': 'N2', 'smiles': 'N#N', 'concentration': 0, 'role': 'nitrogen'}]
    ct_adapter = CanteraIDT(t3=t3.t3,
                            rmg=t3.rmg,
                            paths=t3.paths,
                            logger=t3.logger,
                            atol=t3.rmg['model']['atol'],
                            rtol=t3.rmg['model']['rtol'],
                            )
    assert ct_adapter.idt_dict == dict()
    ct_adapter.simulate()
    assert len(ct_adapter.idt_dict.keys()) == 90
    for val in ct_adapter.idt_dict.values():
        assert val is not None
    assert almost_equal(ct_adapter.idt_dict[(1.0, 100.0, 1600.0)], 2.12081e-05)


def test_simulate_rmg_methane():
    """
    Test the ``simulate()`` method for computing IDT for CH4.
    """
    t3 = run_minimal(project_directory=TEST_DIR_IDT)
    t3.iteration = 2  # CH4 model
    t3.set_paths()
    t3.rmg['reactors'] = [{'type': 'gas batch constant T P',
                           'T': [1000, 1200], 'P': 10,
                           'termination_rate_ratio': 0.01},
                          ]
    t3.rmg['species'] = [{'label': 'methane', 'smiles': 'C', 'concentration': 0, 'role': 'fuel',
                          'equivalence_ratios': [1.0]},
                         {'label': 'O2', 'smiles': '[O][O]', 'concentration': 0, 'role': 'oxygen'},
                         {'label': 'N2', 'smiles': 'N#N', 'concentration': 0, 'role': 'nitrogen'}]
    ct_adapter = CanteraIDT(t3=t3.t3,
                            rmg=t3.rmg,
                            paths=t3.paths,
                            logger=t3.logger,
                            atol=t3.rmg['model']['atol'],
                            rtol=t3.rmg['model']['rtol'],
                            )
    assert ct_adapter.idt_dict == dict()
    ct_adapter.simulate()
    assert len(ct_adapter.idt_dict.keys()) == 15
    for val in ct_adapter.idt_dict.values():
        assert val is not None
    assert almost_equal(ct_adapter.idt_dict[(1.0, 10, 1150.6849315068491)], 0.009160914)


def test_simulate_rmg_heptane():
    """
    Test the ``simulate()`` method for computing IDT for and RMG heptane model.
    """
    t3 = run_minimal(project_directory=TEST_DIR_IDT)
    t3.iteration = 3  # C7H16 model
    t3.set_paths()
    fix_cantera(model_path=t3.paths['cantera annotated'])
    t3.rmg['reactors'] = [{'type': 'gas batch constant T P',
                           'T': [1000, 2000], 'P': 10,
                           'termination_rate_ratio': 0.01},
                          ]
    t3.rmg['species'] = [{'label': 'n-heptane', 'smiles': 'CCCCCCC', 'concentration': 0, 'role': 'fuel',
                          'equivalence_ratios': [1.0, 2.0]},
                         {'label': 'O2', 'smiles': '[O][O]', 'concentration': 0, 'role': 'oxygen'},
                         {'label': 'N2', 'smiles': 'N#N', 'concentration': 0, 'role': 'nitrogen'}]
    ct_adapter = CanteraIDT(t3=t3.t3,
                            rmg=t3.rmg,
                            paths=t3.paths,
                            logger=t3.logger,
                            atol=t3.rmg['model']['atol'],
                            rtol=t3.rmg['model']['rtol'],
                            )
    assert ct_adapter.idt_dict == dict()
    ct_adapter.simulate()
    assert len(ct_adapter.idt_dict.keys()) == 30
    for val in ct_adapter.idt_dict.values():
        assert val is not None
    assert almost_equal(ct_adapter.idt_dict[(1.0, 10, 2000.0)], 1.320029e-08)


def test_get_concentration_combinations():
    """
    Test the ``get_concentration_combinations()`` method.
    """
    t3 = run_minimal(project_directory=TEST_DIR_IDT)
    t3.iteration = 1  # Seiser model
    t3.set_paths()
    t3.rmg['reactors'] = [{'type': 'gas batch constant T P',
                           'T': 1000, 'P': 1,
                           'termination_rate_ratio': 0.01},
                          ]
    t3.rmg['species'] = [{'label': 'nc7h16', 'smiles': 'CCCCCCC', 'concentration': 0, 'role': 'fuel',
                          'equivalence_ratios': [1.0]},
                         {'label': 'o2', 'smiles': '[O][O]', 'concentration': 0, 'role': 'oxygen'},
                         {'label': 'n2', 'smiles': 'N#N', 'concentration': 0, 'role': 'nitrogen'}]
    ct_adapter = CanteraIDT(t3=t3.t3,
                            rmg=t3.rmg,
                            paths=t3.paths,
                            logger=t3.logger,
                            atol=t3.rmg['model']['atol'],
                            rtol=t3.rmg['model']['rtol'],
                            )
    equivalence_ratios, concentration_combinations = ct_adapter.get_concentration_combinations()
    assert equivalence_ratios == [1.0]
    assert concentration_combinations == [{'nc7h16': 1.0, 'o2': 11.0, 'n2': 41.36}]

    t3.iteration = 0  # NH3 model
    t3.set_paths()
    t3.rmg['reactors'] = [{'type': 'gas batch constant T P',
                           'T': [800, 1750], 'P': [1, 100],
                           'termination_rate_ratio': 0.01},
                          ]
    t3.rmg['species'] = [{'label': 'NH3', 'smiles': 'N', 'concentration': 0, 'role': 'fuel',
                          'equivalence_ratios': [0.5, 1.0, 1.5]},
                         {'label': 'O2', 'smiles': '[O][O]', 'concentration': 0, 'role': 'oxygen'},
                         {'label': 'N2', 'smiles': 'N#N', 'concentration': 0, 'role': 'nitrogen'}]
    ct_adapter = CanteraIDT(t3=t3.t3,
                            rmg=t3.rmg,
                            paths=t3.paths,
                            logger=t3.logger,
                            atol=t3.rmg['model']['atol'],
                            rtol=t3.rmg['model']['rtol'],
                            )
    equivalence_ratios, concentration_combinations = ct_adapter.get_concentration_combinations()
    assert equivalence_ratios == [0.5, 1.0, 1.5]
    assert concentration_combinations == [{'NH3(1)': 1, 'O2(3)': 0.375, 'N2(2)': 1.41},
                                          {'NH3(1)': 1, 'O2(3)': 0.75, 'N2(2)': 2.82},
                                          {'NH3(1)': 1, 'O2(3)': 1.125, 'N2(2)': 4.2299999999999995}]


def test_get_idt_per_phi_p_condition():
    """
    Test the ``get_idt_per_phi_p_condition()`` and ``plot_idt_vs_temperature()`` functions.
    """
    idt_dict = {(0.5, 1.0, 700.0): 0.2225226476740191, (0.5, 1.0, 734.0823970037453): 0.16708573916474148, (0.5, 1.0, 771.6535433070866): 5.02356740178409,
                (0.5, 1.0, 813.278008298755): 2.6993671480891055, (0.5, 1.0, 859.6491228070174): 1.356443738133375, (0.5, 1.0, 911.627906976744): 0.6983581107939171,
                (0.5, 1.0, 970.2970297029701): 0.33755656449282906, (0.5, 1.0, 1037.037037037037): 0.14535334628842056, (0.5, 1.0, 1113.6363636363637): 2.736494028032103e-07,
                (0.5, 1.0, 1202.4539877300613): 1.000961330460136e-06, (0.5, 1.0, 1306.6666666666665): 7.12259225172802e-07, (0.5, 1.0, 1430.6569343065692): 4.5459640244849895e-07,
                (0.5, 1.0, 1580.6451612903224): 2.3022666857319686e-07, (0.5, 1.0, 1765.7657657657658): 9.206394695035107e-08, (0.5, 1.0, 2000.0): 3.573432315120674e-08,
                (0.5, 10.0, 700.0): 0.017890482771101373, (0.5, 10.0, 734.0823970037453): 0.006983386498803974, (0.5, 10.0, 771.6535433070866): 0.0030995373885993618,
                (0.5, 10.0, 813.278008298755): 0.0016907682247677828, (0.5, 10.0, 859.6491228070174): 0.0014290458277037052, (0.5, 10.0, 911.627906976744): 0.024839673682728793,
                (0.5, 10.0, 970.2970297029701): 0.016377405433457032, (0.5, 10.0, 1037.037037037037): 0.009061116852517204, (0.5, 10.0, 1113.6363636363637): 0.004355537823553577,
                (0.5, 10.0, 1202.4539877300613): 0.001813773431235719, (0.5, 10.0, 1306.6666666666665): 8.913654979267154e-08, (0.5, 10.0, 1430.6569343065692): 6.880894219736608e-08,
                (0.5, 10.0, 1580.6451612903224): 4.144278144671478e-08, (0.5, 10.0, 1765.7657657657658): 2.0488968735319567e-08, (0.5, 10.0, 2000.0): 8.503011014429142e-09,
                (0.5, 100.0, 700.0): 0.005435488034345394, (0.5, 100.0, 734.0823970037453): 0.001787188448355339, (0.5, 100.0, 771.6535433070866): 0.0006347140607608446,
                (0.5, 100.0, 813.278008298755): 0.00021190487623380018, (0.5, 100.0, 859.6491228070174): 7.987901887938693e-05, (0.5, 100.0, 911.627906976744): 3.263051659337995e-05,
                (0.5, 100.0, 970.2970297029701): 1.4849422053893114e-05, (0.5, 100.0, 1037.037037037037): 9.24871858161717e-06, (0.5, 100.0, 1113.6363636363637): 8.351115423339925e-06,
                (0.5, 100.0, 1202.4539877300613): 4.19701181841529e-05, (0.5, 100.0, 1306.6666666666665): 1.715836447277912e-05, (0.5, 100.0, 1430.6569343065692): 5.90026803036469e-09,
                (0.5, 100.0, 1580.6451612903224): 6.255138391856596e-09, (0.5, 100.0, 1765.7657657657658): 4.26627737099569e-09, (0.5, 100.0, 2000.0): 2.0875416305454136e-09,
                (1.0, 1.0, 700.0): 0.5920046195114103, (1.0, 1.0, 734.0823970037453): 25.20627885398315, (1.0, 1.0, 771.6535433070866): 12.767585163653209, (1.0, 1.0, 813.278008298755): 5.716485074891581,
                (1.0, 1.0, 859.6491228070174): 2.553180004265852, (1.0, 1.0, 911.627906976744): 1.1231722696550877, (1.0, 1.0, 970.2970297029701): 0.43615510429279186,
                (1.0, 1.0, 1037.037037037037): 0.14620000787049678, (1.0, 1.0, 1113.6363636363637): 5.307835695537308e-07, (1.0, 1.0, 1202.4539877300613): 1.7086621427001015e-06,
                (1.0, 1.0, 1306.6666666666665): 1.190123704797599e-06, (1.0, 1.0, 1430.6569343065692): 7.666609861364305e-07, (1.0, 1.0, 1580.6451612903224): 3.7957780648719297e-07,
                (1.0, 1.0, 1765.7657657657658): 1.4873205857608197e-07, (1.0, 1.0, 2000.0): 3.410869675993873e-06, (1.0, 10.0, 700.0): 0.030141236107045628, (1.0, 10.0, 734.0823970037453): 0.012789805640634989,
                (1.0, 10.0, 771.6535433070866): 0.006691030606197884, (1.0, 10.0, 813.278008298755): 0.005425145384644125, (1.0, 10.0, 859.6491228070174): 0.10662963089066134,
                (1.0, 10.0, 911.627906976744): 0.06638081223291674, (1.0, 10.0, 970.2970297029701): 0.0338779727293199, (1.0, 10.0, 1037.037037037037): 0.015278921977995857,
                (1.0, 10.0, 1113.6363636363637): 0.0057515533254156636, (1.0, 10.0, 1202.4539877300613): 0.001860322307495681, (1.0, 10.0, 1306.6666666666665): 1.582033035671788e-07,
                (1.0, 10.0, 1430.6569343065692): 1.1051229608250778e-07, (1.0, 10.0, 1580.6451612903224): 6.788645792555125e-08, (1.0, 10.0, 1765.7657657657658): 3.347974272493323e-08,
                (1.0, 10.0, 2000.0): 1.320029247792099e-08, (1.0, 100.0, 700.0): 0.00920847613468232, (1.0, 100.0, 734.0823970037453): 0.003319939713013387, (1.0, 100.0, 771.6535433070866): 0.0009346034377021333,
                (1.0, 100.0, 813.278008298755): 0.0003364813695425258, (1.0, 100.0, 859.6491228070174): 0.00013188187589578053, (1.0, 100.0, 911.627906976744): 5.8877410092406586e-05,
                (1.0, 100.0, 970.2970297029701): 3.3877254067224806e-05, (1.0, 100.0, 1037.037037037037): 3.6256347086780324e-05, (1.0, 100.0, 1113.6363636363637): 0.00036025425555191536,
                (1.0, 100.0, 1202.4539877300613): 1.5950943566673704e-08, (1.0, 100.0, 1306.6666666666665): 9.913445948190319e-09, (1.0, 100.0, 1430.6569343065692): 9.533288504711534e-09,
                (1.0, 100.0, 1580.6451612903224): 9.776005620375751e-09, (1.0, 100.0, 1765.7657657657658): 7.170974648131883e-09, (1.0, 100.0, 2000.0): 3.3249820396549518e-09, (2.0, 1.0, 700.0): 153.42627889517567,
                (2.0, 1.0, 734.0823970037453): 72.07801439138305, (2.0, 1.0, 771.6535433070866): 29.858800758367142, (2.0, 1.0, 813.278008298755): 12.19350991294148, (2.0, 1.0, 859.6491228070174): 4.981464061860932,
                (2.0, 1.0, 911.627906976744): 1.9009892918050009, (2.0, 1.0, 970.2970297029701): 0.6050619278279298, (2.0, 1.0, 1037.037037037037): 0.15977101588655185, (2.0, 1.0, 1113.6363636363637): 3.554181280297076e-06,
                (2.0, 1.0, 1202.4539877300613): 2.692532328166398e-06, (2.0, 1.0, 1306.6666666666665): 2.0742127776023104e-06, (2.0, 1.0, 1430.6569343065692): 1.5257400932247982e-06,
                (2.0, 1.0, 1580.6451612903224): 6.4898453340595e-07, (2.0, 1.0, 1765.7657657657658): 2.276317066246901e-07, (2.0, 1.0, 2000.0): 9.141443099145247e-08, (2.0, 10.0, 700.0): 0.05446218706560296,
                (2.0, 10.0, 734.0823970037453): 0.026925447558953746, (2.0, 10.0, 771.6535433070866): 0.02026453438020286, (2.0, 10.0, 813.278008298755): 0.3121168817399508,
                (2.0, 10.0, 859.6491228070174): 0.2855186343870682, (2.0, 10.0, 911.627906976744): 0.16722258168806528, (2.0, 10.0, 970.2970297029701): 0.07008781204858813,
                (2.0, 10.0, 1037.037037037037): 0.026701006033165515, (2.0, 10.0, 1113.6363636363637): 0.008178628130578134, (2.0, 10.0, 1202.4539877300613): 0.002104845434600624,
                (2.0, 10.0, 1306.6666666666665): 2.429411770965833e-07, (2.0, 10.0, 1430.6569343065692): 1.8684140375699375e-07, (2.0, 10.0, 1580.6451612903224): 1.326022435725622e-07,
                (2.0, 10.0, 1765.7657657657658): 5.4793403682451235e-08, (2.0, 10.0, 2000.0): 1.9529689210357182e-08, (2.0, 100.0, 700.0): 0.01345974259908484, (2.0, 100.0, 734.0823970037453): 0.004332708238713801,
                (2.0, 100.0, 771.6535433070866): 0.0014875458039001063, (2.0, 100.0, 813.278008298755): 0.0005568658354940749, (2.0, 100.0, 859.6491228070174): 0.00023782156661448042,
                (2.0, 100.0, 911.627906976744): 0.00013024762221742106, (2.0, 100.0, 970.2970297029701): 0.0003654164224997926, (2.0, 100.0, 1037.037037037037): 0.00047137250311130507,
                (2.0, 100.0, 1113.6363636363637): 0.0011588590661409058, (2.0, 100.0, 1202.4539877300613): 1.9886722119469843e-08, (2.0, 100.0, 1306.6666666666665): 1.2862135863448915e-08,
                (2.0, 100.0, 1430.6569343065692): 1.5833393881133795e-08, (2.0, 100.0, 1580.6451612903224): 1.538084118885189e-08, (2.0, 100.0, 1765.7657657657658): 1.5502875986669263e-08,
                (2.0, 100.0, 2000.0): 5.251911799476016e-09}

    data = get_idt_per_phi_p_condition(idt_dict=idt_dict)
    assert data == {0.5: {1.0: {1.4285714285714286: 0.2225226476740191, 1.3622448979591837: 0.16708573916474148, 1.2959183673469388: 5.02356740178409, 1.229591836734694: 2.6993671480891055, 1.1632653061224492: 1.356443738133375, 1.0969387755102042: 0.6983581107939171, 1.0306122448979593: 0.33755656449282906, 0.9642857142857144: 0.14535334628842056, 0.8979591836734693: 2.736494028032103e-07, 0.8316326530612246: 1.000961330460136e-06, 0.7653061224489797: 7.12259225172802e-07, 0.6989795918367347: 4.5459640244849895e-07, 0.6326530612244898: 2.3022666857319686e-07, 0.5663265306122449: 9.206394695035107e-08, 0.5: 3.573432315120674e-08},
                          10.0: {1.4285714285714286: 0.017890482771101373, 1.3622448979591837: 0.006983386498803974, 1.2959183673469388: 0.0030995373885993618, 1.229591836734694: 0.0016907682247677828, 1.1632653061224492: 0.0014290458277037052, 1.0969387755102042: 0.024839673682728793, 1.0306122448979593: 0.016377405433457032, 0.9642857142857144: 0.009061116852517204, 0.8979591836734693: 0.004355537823553577, 0.8316326530612246: 0.001813773431235719, 0.7653061224489797: 8.913654979267154e-08, 0.6989795918367347: 6.880894219736608e-08, 0.6326530612244898: 4.144278144671478e-08, 0.5663265306122449: 2.0488968735319567e-08, 0.5: 8.503011014429142e-09},
                          100.0: {1.4285714285714286: 0.005435488034345394, 1.3622448979591837: 0.001787188448355339, 1.2959183673469388: 0.0006347140607608446, 1.229591836734694: 0.00021190487623380018, 1.1632653061224492: 7.987901887938693e-05, 1.0969387755102042: 3.263051659337995e-05, 1.0306122448979593: 1.4849422053893114e-05, 0.9642857142857144: 9.24871858161717e-06, 0.8979591836734693: 8.351115423339925e-06, 0.8316326530612246: 4.19701181841529e-05, 0.7653061224489797: 1.715836447277912e-05, 0.6989795918367347: 5.90026803036469e-09, 0.6326530612244898: 6.255138391856596e-09, 0.5663265306122449: 4.26627737099569e-09, 0.5: 2.0875416305454136e-09}},
                    1.0: {1.0: {1.4285714285714286: 0.5920046195114103, 1.3622448979591837: 25.20627885398315, 1.2959183673469388: 12.767585163653209, 1.229591836734694: 5.716485074891581, 1.1632653061224492: 2.553180004265852, 1.0969387755102042: 1.1231722696550877, 1.0306122448979593: 0.43615510429279186, 0.9642857142857144: 0.14620000787049678, 0.8979591836734693: 5.307835695537308e-07, 0.8316326530612246: 1.7086621427001015e-06, 0.7653061224489797: 1.190123704797599e-06, 0.6989795918367347: 7.666609861364305e-07, 0.6326530612244898: 3.7957780648719297e-07, 0.5663265306122449: 1.4873205857608197e-07, 0.5: 3.410869675993873e-06},
                          10.0: {1.4285714285714286: 0.030141236107045628, 1.3622448979591837: 0.012789805640634989, 1.2959183673469388: 0.006691030606197884, 1.229591836734694: 0.005425145384644125, 1.1632653061224492: 0.10662963089066134, 1.0969387755102042: 0.06638081223291674, 1.0306122448979593: 0.0338779727293199, 0.9642857142857144: 0.015278921977995857, 0.8979591836734693: 0.0057515533254156636, 0.8316326530612246: 0.001860322307495681, 0.7653061224489797: 1.582033035671788e-07, 0.6989795918367347: 1.1051229608250778e-07, 0.6326530612244898: 6.788645792555125e-08, 0.5663265306122449: 3.347974272493323e-08, 0.5: 1.320029247792099e-08},
                          100.0: {1.4285714285714286: 0.00920847613468232, 1.3622448979591837: 0.003319939713013387, 1.2959183673469388: 0.0009346034377021333, 1.229591836734694: 0.0003364813695425258, 1.1632653061224492: 0.00013188187589578053, 1.0969387755102042: 5.8877410092406586e-05, 1.0306122448979593: 3.3877254067224806e-05, 0.9642857142857144: 3.6256347086780324e-05, 0.8979591836734693: 0.00036025425555191536, 0.8316326530612246: 1.5950943566673704e-08, 0.7653061224489797: 9.913445948190319e-09, 0.6989795918367347: 9.533288504711534e-09, 0.6326530612244898: 9.776005620375751e-09, 0.5663265306122449: 7.170974648131883e-09, 0.5: 3.3249820396549518e-09}},
                    2.0: {1.0: {1.4285714285714286: 153.42627889517567, 1.3622448979591837: 72.07801439138305, 1.2959183673469388: 29.858800758367142, 1.229591836734694: 12.19350991294148, 1.1632653061224492: 4.981464061860932, 1.0969387755102042: 1.9009892918050009, 1.0306122448979593: 0.6050619278279298, 0.9642857142857144: 0.15977101588655185, 0.8979591836734693: 3.554181280297076e-06, 0.8316326530612246: 2.692532328166398e-06, 0.7653061224489797: 2.0742127776023104e-06, 0.6989795918367347: 1.5257400932247982e-06, 0.6326530612244898: 6.4898453340595e-07, 0.5663265306122449: 2.276317066246901e-07, 0.5: 9.141443099145247e-08},
                          10.0: {1.4285714285714286: 0.05446218706560296, 1.3622448979591837: 0.026925447558953746, 1.2959183673469388: 0.02026453438020286, 1.229591836734694: 0.3121168817399508, 1.1632653061224492: 0.2855186343870682, 1.0969387755102042: 0.16722258168806528, 1.0306122448979593: 0.07008781204858813, 0.9642857142857144: 0.026701006033165515, 0.8979591836734693: 0.008178628130578134, 0.8316326530612246: 0.002104845434600624, 0.7653061224489797: 2.429411770965833e-07, 0.6989795918367347: 1.8684140375699375e-07, 0.6326530612244898: 1.326022435725622e-07, 0.5663265306122449: 5.4793403682451235e-08, 0.5: 1.9529689210357182e-08},
                          100.0: {1.4285714285714286: 0.01345974259908484, 1.3622448979591837: 0.004332708238713801, 1.2959183673469388: 0.0014875458039001063, 1.229591836734694: 0.0005568658354940749, 1.1632653061224492: 0.00023782156661448042, 1.0969387755102042: 0.00013024762221742106, 1.0306122448979593: 0.0003654164224997926, 0.9642857142857144: 0.00047137250311130507, 0.8979591836734693: 0.0011588590661409058, 0.8316326530612246: 1.9886722119469843e-08, 0.7653061224489797: 1.2862135863448915e-08, 0.6989795918367347: 1.5833393881133795e-08, 0.6326530612244898: 1.538084118885189e-08, 0.5663265306122449: 1.5502875986669263e-08, 0.5: 5.251911799476016e-09}}}
    assert len(data[0.5][1.0].keys()) == len(data[1.0][10.0].keys()) == len(data[2.0][100.0].keys()) == 15

    plot_idt_vs_temperature(idt_dict=idt_dict, figs_path=os.path.join(TEST_DIR_IDT, 'iteration_3', 'Figures'))


def teardown_module():
    """
    A method that is run after all unit tests in this class.
    Delete all project directories created during these unit tests
    """
    for test_dir_path in [TEST_DIR, TEST_DIR_IDT]:
        log_archive = os.path.join(test_dir_path, 'log_archive')
        dirs = [log_archive]
        for dir_ in dirs:
            if os.path.isdir(dir_):
                shutil.rmtree(dir_, ignore_errors=True)
        files = [os.path.join(test_dir_path, 't3.log')]
        for file in files:
            if os.path.isfile(file):
                os.remove(file)
        for iteration in [0, 1, 2, 3, 4, 5]:
            figs_path = os.path.join(test_dir_path, f'iteration_{iteration}', 'Figures')
            if os.path.isdir(figs_path):
                shutil.rmtree(figs_path, ignore_errors=True)
